{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "RegisterForAlertsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/snow-alert-dev-registerForAlerts"
      }
    },
    "MakeAlertsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/snow-alert-dev-makeAlerts"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "snow-alert",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/snow-alert-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/snow-alert-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UsersTable",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "snow-alert",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "RegisterForAlertsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/snow-alert/dev/1683576727380-2023-05-08T20:12:07.380Z/snow-alert.zip"
        },
        "Handler": "/opt/nodejs/node_modules/datadog-lambda-js/handler.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "snow-alert-dev-registerForAlerts",
        "MemorySize": 1024,
        "Timeout": 6,
        "Tags": [
          {
            "Key": "dd_sls_plugin",
            "Value": "v5.29.0"
          }
        ],
        "Environment": {
          "Variables": {
            "USERS_TABLE": "SnowAlertDB",
            "DD_API_KEY": "c92289dc6e1b1a59e6f79f058ad23c16",
            "DD_SITE": "us5.datadoghq.com",
            "DD_LOG_LEVEL": "info",
            "DD_TRACE_ENABLED": true,
            "DD_MERGE_XRAY_TRACES": false,
            "DD_LOGS_INJECTION": true,
            "DD_SERVERLESS_LOGS_ENABLED": true,
            "DD_CAPTURE_LAMBDA_PAYLOAD": false,
            "DD_SERVICE": "snow-alert",
            "DD_ENV": "dev",
            "DD_TAGS": "git.commit.sha:b8a2e2084094e230aa640cda9092be29a5e6bfa6,git.repository_url:github.com/Jmckinnon10/snow-alert.git",
            "DD_LAMBDA_HANDLER": "registerForAlerts.handler"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Node14-x:90",
          "arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Extension:42"
        ]
      },
      "DependsOn": [
        "RegisterForAlertsLogGroup"
      ]
    },
    "MakeAlertsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/snow-alert/dev/1683576727380-2023-05-08T20:12:07.380Z/snow-alert.zip"
        },
        "Handler": "/opt/nodejs/node_modules/datadog-lambda-js/handler.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "snow-alert-dev-makeAlerts",
        "MemorySize": 1024,
        "Timeout": 6,
        "Tags": [
          {
            "Key": "dd_sls_plugin",
            "Value": "v5.29.0"
          }
        ],
        "Environment": {
          "Variables": {
            "USERS_TABLE": "SnowAlertDB",
            "DD_API_KEY": "c92289dc6e1b1a59e6f79f058ad23c16",
            "DD_SITE": "us5.datadoghq.com",
            "DD_LOG_LEVEL": "info",
            "DD_TRACE_ENABLED": true,
            "DD_MERGE_XRAY_TRACES": false,
            "DD_LOGS_INJECTION": true,
            "DD_SERVERLESS_LOGS_ENABLED": true,
            "DD_CAPTURE_LAMBDA_PAYLOAD": false,
            "DD_SERVICE": "snow-alert",
            "DD_ENV": "dev",
            "DD_TAGS": "git.commit.sha:b8a2e2084094e230aa640cda9092be29a5e6bfa6,git.repository_url:github.com/Jmckinnon10/snow-alert.git",
            "DD_LAMBDA_HANDLER": "makeAlerts.handler"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Node14-x:90",
          "arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Extension:42"
        ]
      },
      "DependsOn": [
        "MakeAlertsLogGroup"
      ]
    },
    "RegisterForAlertsLambdaVersionZZq4jtMCFB4TLra7to4j4fITAa9j7PNnYXoKMAyliA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RegisterForAlertsLambdaFunction"
        },
        "CodeSha256": "GcDhhjgzSabDotXxIe9b5EWjZ9oV/Dr/fQkX8Qxl+ac="
      }
    },
    "MakeAlertsLambdaVersionF7Yr6Jp7BwqKz6fhxP7CK9JsMACFampxsyu1PbmXwpo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MakeAlertsLambdaFunction"
        },
        "CodeSha256": "GcDhhjgzSabDotXxIe9b5EWjZ9oV/Dr/fQkX8Qxl+ac="
      }
    },
    "MakeAlertsEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 13 * * ? 0)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "MakeAlertsLambdaFunction",
                "Arn"
              ]
            },
            "Id": "makeAlertsSchedule"
          }
        ]
      }
    },
    "MakeAlertsLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MakeAlertsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "MakeAlertsEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-snow-alert",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "RegisterForAlertsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RegisterForAlertsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationRegisterForAlerts": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "RegisterForAlertsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePost": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationRegisterForAlerts"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationRegisterForAlerts"
    },
    "UsersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "userId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "userId",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TableName": "SnowAlertDB"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-snow-alert-dev-ServerlessDeploymentBucketName"
      }
    },
    "DatadogMonitorregisterForAlerts": {
      "Description": "See registerForAlerts in Datadog",
      "Value": "https://app.us5.datadoghq.com/functions?selection=aws-lambda-functions%2Bsnow-alert-dev-registerforalerts%2Bus-east-1%2B237001296179",
      "Export": {
        "Name": "sls-snow-alert-dev-DatadogMonitorregisterForAlerts"
      }
    },
    "DatadogMonitormakeAlerts": {
      "Description": "See makeAlerts in Datadog",
      "Value": "https://app.us5.datadoghq.com/functions?selection=aws-lambda-functions%2Bsnow-alert-dev-makealerts%2Bus-east-1%2B237001296179",
      "Export": {
        "Name": "sls-snow-alert-dev-DatadogMonitormakeAlerts"
      }
    },
    "RegisterForAlertsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RegisterForAlertsLambdaVersionZZq4jtMCFB4TLra7to4j4fITAa9j7PNnYXoKMAyliA"
      },
      "Export": {
        "Name": "sls-snow-alert-dev-RegisterForAlertsLambdaFunctionQualifiedArn"
      }
    },
    "MakeAlertsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MakeAlertsLambdaVersionF7Yr6Jp7BwqKz6fhxP7CK9JsMACFampxsyu1PbmXwpo"
      },
      "Export": {
        "Name": "sls-snow-alert-dev-MakeAlertsLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-snow-alert-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-snow-alert-dev-HttpApiUrl"
      }
    }
  }
}